name: Build and Release (Browser Extension)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Build Environment'
        required: true
        type: choice
        options:
          - local
          - beta
          - prod
        default: 'local'
      build_mode:
        description: Build mode
        type: choice
        required: true
        default: build and release
        options:
          - build and release
          - build and release (force)
          - build only
      version_tag:
        description: Version tag (e.g. 1.2.5, empty to use the one defined in package.json)
        type: string
        required: false

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '19'
          cache: 'npm'
          cache-dependency-path: 'browser-extension/**/package-lock.json'

      - name: Install dependencies
        working-directory: browser-extension
        run: ./install.sh

      - name: Build Extension
        working-directory: browser-extension
        run: ./build.sh ${{ github.event.inputs.environment }}

      - name: Run tests
        working-directory: browser-extension
        run: ./test.sh

      - name: Create Release Archive
        run: |
          cd browser-extension
          zip -r ../extension-${{ github.event.inputs.environment }}.zip mv2/dist mv3/dist

      - name: Set version
        id: version
        run: |
          version="${{ inputs.version_tag }}"
          if [ -z "$version" ]; then
            version=$(node -p "require('./browser-extension/mv3/package.json').version")
          fi
          echo "New version is: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Set release name
        id: release_name
        run: |
          release_name="${{ inputs.release_name }}"
          if [ -z "$release_name" ]; then
            release_name="v${{ steps.version.outputs.version }} (${{ github.event.inputs.environment }})"
          fi
          echo "New release_name is: $release_name"
          echo "release_name=$release_name" >> $GITHUB_OUTPUT

      - name: Delete existing tag and release (only forced releases)
        if: inputs.build_mode == 'build and release (force)'
        run: |
          echo "Deleting tag and release..."
          echo "Tag name: ${{ steps.version.outputs.version }}"
          echo "Release name: ${{ steps.release_name.outputs.release_name }}"
          output=$(gh release delete ${{ steps.version.outputs.version }} -y --cleanup-tag 2>&1) || [[ "${output}" == "release not found" ]]
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.release_name.outputs.release_name }}
          tag_name: ${{ steps.version.outputs.version }}
          generate_release_notes: true
          prerelease: ${{ github.event.inputs.environment != 'prod' }}
          files: extension-${{ github.event.inputs.environment }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
