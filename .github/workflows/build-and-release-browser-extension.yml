name: Build and Release (Browser Extension)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Build Environment'
        required: true
        type: choice
        options:
          - all
          - local
          - beta
          - prod
        default: all
      build_mode:
        description: Build mode
        type: choice
        required: true
        default: build and release
        options:
          - build and release
          - build and release (force)
          - build only
      version_tag:
        description: Version tag (e.g. 1.2.5, empty to use the one defined in package.json)
        type: string
        required: false
      release_name:
        description: Release name (e.g. v1.2.5, empty to generate one automatically)
        type: string
        required: false

jobs:
  determine-environments:
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.set-environments.outputs.environments }}
      is_all_environments: ${{ steps.set-environments.outputs.is_all_environments }}
    steps:
      - id: set-environments
        run: |
          if [ "${{ github.event.inputs.environment }}" == "all" ]; then
            echo "environments=['local', 'beta', 'prod']" >> $GITHUB_OUTPUT
            echo "is_all_environments=true" >> $GITHUB_OUTPUT
          else
            echo "environments=['${{ github.event.inputs.environment }}']" >> $GITHUB_OUTPUT
            echo "is_all_environments=false" >> $GITHUB_OUTPUT
          fi

  build-and-release:
    needs: determine-environments
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ${{ fromJson(needs.determine-environments.outputs.environments) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 19
          cache: npm
          cache-dependency-path: |
            browser-extension/**/package-lock.json
            common/analytics-vendors/package-lock.json

      - name: Install analytics vendors dependencies
        working-directory: common/analytics-vendors
        run: npm install

      - name: Install dependencies
        working-directory: browser-extension
        run: ./install.sh

      - name: Build Extension
        working-directory: browser-extension
        run: ./build.sh ${{ matrix.environment }}

      - name: Run tests
        working-directory: browser-extension
        run: ./test.sh

      - name: Create Release Archive
        run: |
          cd browser-extension
          zip -r ../extension-${{ matrix.environment }}.zip mv2/dist mv3/dist

      - name: Set version
        id: version
        run: |
          version="${{ inputs.version_tag }}"
          if [ -z "$version" ]; then
            version=$(node -p "require('./browser-extension/mv3/package.json').version")
          fi
          echo "New version is: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: extension-${{ matrix.environment }}
          path: extension-${{ matrix.environment }}.zip
          retention-days: 1

  create-release:
    needs: [determine-environments, build-and-release]
    runs-on: ubuntu-latest
    if: inputs.build_mode != 'build only'
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4

      - name: Set version
        id: version
        run: |
          version="${{ inputs.version_tag }}"
          if [ -z "$version" ]; then
            version=$(ls extension-*/extension-*.zip | head -n1 | sed 's/.*extension-\(.*\)\.zip/\1/')
          fi
          echo "New version is: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Set release name
        id: release_name
        run: |
          release_name="${{ inputs.release_name }}"
          if [ -z "$release_name" ]; then
            if [ "${{ needs.determine-environments.outputs.is_all_environments }}" == "true" ]; then
              release_name="v${{ steps.version.outputs.version }} (all)"
            else
              release_name="v${{ steps.version.outputs.version }} (${{ fromJson(needs.determine-environments.outputs.environments)[0] }})"
            fi
          fi
          echo "New release_name is: $release_name"
          echo "release_name=$release_name" >> $GITHUB_OUTPUT

      - name: Delete existing tag and release (only forced releases)
        if: inputs.build_mode == 'build and release (force)'
        run: |
          echo "Deleting tag and release..."
          echo "Tag name: ${{ steps.version.outputs.version }}"
          echo "Release name: ${{ steps.release_name.outputs.release_name }}"
          output=$(gh release delete ${{ steps.version.outputs.version }} -y --cleanup-tag 2>&1) || [[ "${output}" == "release not found" ]]
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.release_name.outputs.release_name }}
          tag_name: ${{ steps.version.outputs.version }}
          generate_release_notes: true
          prerelease: ${{ !needs.determine-environments.outputs.is_all_environments && fromJson(needs.determine-environments.outputs.environments)[0] != 'prod' }}
          files: |
            extension-*/extension-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
